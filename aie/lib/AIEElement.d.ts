import AIEMemory from './AIEMemory';
import AIEEventProcessor from './AIEEventProcessor';
import AIEPrestanceCalculator from './AIEPrestanceCalculator';
import AIEProperty from './AIEProperty';
export default abstract class AIEElement {
    private trigger;
    protected baseElement: any;
    private name;
    private children;
    private processor;
    private parent;
    private memory;
    private prestance;
    private prestanceCalculator;
    private maxPrestance;
    private updates;
    private maxUpdates;
    private born;
    private properties;
    constructor(baseElement: any);
    setUpdates(updates: number): void;
    setMaxPrestance(prestance: number): void;
    setName(name: string): void;
    generateId(): string;
    updatePrestance(increment?: number): number;
    getInteractions(): number;
    getParentInteractions(): number;
    getLife(now?: number): number;
    getParentLife(now?: number): number;
    getName(): string;
    getTriggersName(): any;
    getEventName(): string;
    isAmbient(): boolean;
    setParent(element: AIEElement): void;
    setProccesor(processor: AIEEventProcessor): void;
    getParent(): AIEElement;
    setProperties(properties: Array<AIEProperty>): void;
    getProperties(): Array<AIEProperty>;
    getPropertiesNames(): Array<String>;
    setChildren(element: AIEElement): void;
    onTrigger(name: string): void;
    getChildren(): AIEElement[];
    getScore(): number;
    getAmbientScore(): number;
    updateChildrenPrestance(increment: number, excluded?: Array<AIEElement>): void;
    getMaxPrestance(): number;
    hasParent(): boolean;
    hasChildren(): boolean;
    setPrestanceCalculator(prestanceCalculator: AIEPrestanceCalculator): void;
    getPrestance(): number;
    setScore(value: number): number;
    setPrestance(value: number): void;
    mutate(maxPrestance: number): void;
    abstract initializeMemory(seed: string): AIEMemory;
    abstract setBaseElement(baseElement: any): void;
    abstract getAttr(attributeName: string): string;
    abstract getAttrs(attributeName: string): any;
    abstract getBaseElementParent(): Node;
    abstract getBaseElement(): any;
    abstract bindTriggers(): void;
    abstract getDate(): number;
    abstract getPhysicalAttributes(): any;
    abstract transform(percent: number): void;
}
